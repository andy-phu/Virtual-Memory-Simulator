        -:    0:Source:hw.c
        -:    0:Graph:hwX-hw.gcno
        -:    0:Data:hwX-hw.gcda
        -:    0:Runs:3
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:
        -:    5:#define VIRTUAL_MEMORY_SIZE 128
        -:    6:#define MAIN_MEMORY_SIZE 32
        -:    7:#define PAGE_SIZE 8
        -:    8:#define NUM_VIRTUAL_PAGES (VIRTUAL_MEMORY_SIZE / PAGE_SIZE)
        -:    9:#define NUM_MAIN_PAGES (MAIN_MEMORY_SIZE / PAGE_SIZE)
        -:   10:
        -:   11:// Define a structure to represent a page
        -:   12:typedef struct {
        -:   13:    int validBit;
        -:   14:    int dirtyBit;
        -:   15:    int pageNumber;
        -:   16:    int fifo;
        -:   17:    int lru;
        -:   18:} Page;
        -:   19:
        -:   20:Page ptable[NUM_VIRTUAL_PAGES];
        -:   21:int num_pages_used = -1;
        -:   22:int fifo_counter = 0; // the lower the number the longer it has been in main
        -:   23:int replacement_algorithim = 1; //1 for FIFO and 2 for LRU
        -:   24:int victim_page = 0; // 1 if there is a victim page
        -:   25:
        -:   26:int lru_counter = 0; 
        -:   27:
       27:   28:int findPage(int address){
       27:   29:    return (address/8);
        -:   30:}
        -:   31:
       19:   32:int findAvailableMainMemoryPage(Page ptable[]){
       19:   33:    if (num_pages_used < NUM_MAIN_PAGES - 1){ // if there is available pages in main memory, insert into next
       12:   34:        return num_pages_used + 1;
        -:   35:    }
        -:   36:    else{
        7:   37:        victim_page = 1;
        7:   38:        if (replacement_algorithim == 1){ // FIFO Replacement
        6:   39:            int curr_longest_in_main_memory = 100000;
        -:   40:            int curr_longest_page;
      102:   41:            for (int i = 0; i < NUM_VIRTUAL_PAGES; i++) {
       96:   42:                if(ptable[i].validBit == 1){
       28:   43:                    if(ptable[i].fifo <= curr_longest_in_main_memory){
       10:   44:                        curr_longest_in_main_memory = ptable[i].fifo;
       10:   45:                        curr_longest_page = i;
        -:   46:                    }
        -:   47:                }
        -:   48:            }
        6:   49:            ptable[curr_longest_page].fifo = 100000;
        6:   50:            return ptable[curr_longest_page].pageNumber;
        -:   51:        } 
        -:   52:        else{
        -:   53:            //LRU Replacement
        1:   54:            int minLRU = 100000;
        1:   55:            int minFIFO = 100000;
        -:   56:
        -:   57:            int curr_longest_page;
       17:   58:            for (int i = 0; i < NUM_VIRTUAL_PAGES; i++) {
       16:   59:                if(ptable[i].validBit == 1){ //if it is a page in main memory 
        4:   60:                    if(ptable[i].lru == minLRU){ //find the smallest page lru to evict 
        -:   61:                        //break tie by going with the one that was in the ptable first 
        2:   62:                        if(ptable[i].fifo <= minFIFO){
        1:   63:                            minFIFO = ptable[i].fifo; //sets to the smallest 
        1:   64:                            curr_longest_page = i;
        -:   65:                        }
        -:   66:                    }
        2:   67:                    else if(ptable[i].lru < minLRU){ //find the smallest page lru to evict 
        1:   68:                        minLRU = ptable[i].lru; //set to the smallest
        1:   69:                        curr_longest_page = i; //gets the smallest lru page 
        -:   70:                    }
        -:   71:                }
        -:   72:            }
        1:   73:            ptable[curr_longest_page].lru = 0; //reset lru to 0
        -:   74:
        -:   75:
        1:   76:            return curr_longest_page; //returns the smallest lru page 
        -:   77:        }
        -:   78:    }
        -:   79:}
        -:   80:
        -:   81://to find the main memory address that corresponds to the virtual memory address
        8:   82:int findMainMemoryAddress(int page_number, int virtual_address){
        8:   83:    return ((page_number * 8) + (virtual_address % 8));
        -:   84:}
        -:   85:
        3:   86:int main(int argument, char* argv[]) {
        3:   87:    if (argument == 2) {
        3:   88:        char *algorithm = argv[1];
        3:   89:        if (strcmp(algorithm, "FIFO") == 0) { // Selected page replacement algorithm: FIFO
        1:   90:            replacement_algorithim = 1;
        2:   91:        } else if (strcmp(algorithm, "LRU") == 0){ // Selected page replacement algorithm: LRU
        1:   92:            replacement_algorithim = 2;
        -:   93:        }
        -:   94:    }
        -:   95:
        -:   96:    int virtualMemory[VIRTUAL_MEMORY_SIZE]; //initalize virtual memory
      387:   97:    for (int i = 0; i < VIRTUAL_MEMORY_SIZE; i++) {
      384:   98:        virtualMemory[i] = -1;
        -:   99:    }
        -:  100:    int mainMemory[MAIN_MEMORY_SIZE]; //initalize main memory
      387:  101:    for (int j = 0; j < VIRTUAL_MEMORY_SIZE; j++) {
      384:  102:        mainMemory[j] = -1;
        -:  103:    }
        -:  104:
        3:  105:    int address_counter = 0;
       51:  106:    for (int i = 0; i < NUM_VIRTUAL_PAGES; i++) {
       48:  107:        ptable[i].validBit = 0;
       48:  108:        ptable[i].dirtyBit = 0;
       48:  109:        ptable[i].pageNumber = i;
        -:  110:    }
        -:  111:
        -:  112:
        -:  113:    //3.2
        -:  114:    char input[128];
        -:  115:
       36:  116:    while(1){
       39:  117:        printf("> ");
        -:  118:        
       39:  119:        fgets(input, 128, stdin);
        -:  120:
       39:  121:        char *command = strtok(input, " \n");
       39:  122:        char *arg1 = NULL; 
       39:  123:        char *arg2 = NULL; 
        -:  124:
        -:  125:
       39:  126:        if (command != NULL){
       39:  127:            arg1 = strtok(NULL, " \n");        
        -:  128:        }
        -:  129:
       39:  130:        if (arg1!= NULL){
       31:  131:            arg2 = strtok(NULL, " \n");        
        -:  132:        }
        -:  133:
       39:  134:        if(strcmp(command,"quit") == 0){
        3:  135:            break;
        -:  136:        }
       47:  137:        else if (strcmp(command,"read") == 0 && arg1 != NULL){
       11:  138:            int virtual_address = atoi(arg1);
        -:  139:
       11:  140:            int corresponding_page = findPage(virtual_address);
        -:  141:            
       11:  142:            if (ptable[corresponding_page].validBit == 0){
        8:  143:                printf("A Page Fault Has Occurred\n");
        8:  144:                printf("%d\n", virtualMemory[virtual_address]);
        -:  145:
        8:  146:                int available_page = findAvailableMainMemoryPage(ptable);
        -:  147:                
        -:  148:
        8:  149:                int temp_array[8] = {0}; 
        8:  150:                int curr_dirtyBit = 0;
        8:  151:                if (victim_page == 1){  
       14:  152:                    for(int i = 0; i < NUM_VIRTUAL_PAGES; i++){
       14:  153:                        if (ptable[i].pageNumber == available_page){
        4:  154:                            if (ptable[i].dirtyBit == 1){
        4:  155:                                curr_dirtyBit = 1;
        4:  156:                                break;
        -:  157:                            }
        -:  158:                        }
        -:  159:                    }
        4:  160:                    if (curr_dirtyBit == 1){ //if a page is evicted and dirtyBit is 1
        4:  161:                        int copy_back_to_virtual = available_page * 8;
       36:  162:                        for(int i = corresponding_page * 8; i < (corresponding_page * 8) + 8; i++){
       32:  163:                            temp_array[i] = virtualMemory[i];
       32:  164:                            virtualMemory[i] = mainMemory[copy_back_to_virtual]; //replacing page in virtual memory with evicted page thus replacing 8 addresses
       32:  165:                            copy_back_to_virtual++;
        -:  166:                        }
        4:  167:                        victim_page = 0;
        -:  168:                    }
        4:  169:                    ptable[available_page].validBit = 0; 
        4:  170:                    ptable[available_page].dirtyBit = 0;
        4:  171:                    ptable[available_page].pageNumber = available_page;
        4:  172:                    victim_page = 0;
        -:  173:
        -:  174:                }
        -:  175:
        -:  176:
        8:  177:                int start_replacing_from = available_page * 8; //address to start replacing mainMemory data with virtualMemory data
       72:  178:                for(int i = corresponding_page * 8; i < (corresponding_page * 8) + 8; i++){
       64:  179:                    if(curr_dirtyBit == 1){
       32:  180:                        mainMemory[start_replacing_from] = temp_array[i];
        -:  181:                    }
        -:  182:                    else{
       32:  183:                        mainMemory[start_replacing_from] = virtualMemory[i]; //replacing the page thus replacing 8 addresses
        -:  184:                    }
       64:  185:                    start_replacing_from++;
        -:  186:                }
        8:  187:                ptable[corresponding_page].validBit = 1;
        8:  188:                ptable[corresponding_page].pageNumber = available_page;
        8:  189:                ptable[corresponding_page].fifo = fifo_counter;
        8:  190:                ptable[corresponding_page].lru = 0;
        -:  191:
        8:  192:                num_pages_used++;
        8:  193:                fifo_counter++;
        -:  194:
        -:  195:                
        -:  196:
        -:  197:            } 
        -:  198:            else{
        3:  199:                int virtual_to_main = findMainMemoryAddress(ptable[corresponding_page].pageNumber, virtual_address);
        3:  200:                printf("%d\n", mainMemory[virtual_to_main]);
        3:  201:                ptable[corresponding_page].lru += 1; //increment lru when page read
        -:  202:            } 
        -:  203:        }
       41:  204:        else if (strcmp(command,"write") == 0 && arg1 != NULL && arg2 != NULL){
       16:  205:            int virtual_address = atoi(arg1);
       16:  206:            if (virtual_address <= VIRTUAL_MEMORY_SIZE ){
       16:  207:                int data = atoi(arg2);
        -:  208:
       16:  209:                int corresponding_page = findPage(virtual_address);
        -:  210:
       16:  211:                virtualMemory[virtual_address] = data; //writing to virtual memory
        -:  212:
       16:  213:                if (ptable[corresponding_page].validBit == 0){
       11:  214:                    printf("A Page Fault Has Occurred\n");
        -:  215:
       11:  216:                    int tempPage = findAvailableMainMemoryPage(ptable); //returns the page that should be evicted 
       11:  217:                    int available_page = tempPage;
        -:  218:
       11:  219:                    if (num_pages_used == NUM_MAIN_PAGES-1){
        3:  220:                        available_page = ptable[tempPage].pageNumber;
        -:  221:                    }
        -:  222:
       11:  223:                    int temp_array[8] = {0}; 
       11:  224:                    int curr_dirtyBit = 0;
       11:  225:                    if (victim_page == 1){  
        8:  226:                        for(int i = 0; i < NUM_VIRTUAL_PAGES; i++){
        8:  227:                            if (ptable[i].pageNumber == available_page){
        5:  228:                                if (ptable[i].dirtyBit == 1){
        3:  229:                                    curr_dirtyBit = 1;
        3:  230:                                    break;
        -:  231:                                }
        -:  232:                            }
        -:  233:                        }
        3:  234:                        if (curr_dirtyBit == 1){ //if a page is evicted and dirtyBit is 1
        3:  235:                            int copy_back_to_virtual = available_page * 8;
       27:  236:                            for(int i = corresponding_page * 8; i < (corresponding_page * 8) + 8; i++){
       24:  237:                                temp_array[i] = virtualMemory[i];
       24:  238:                                virtualMemory[i] = mainMemory[copy_back_to_virtual]; //replacing page in virtual memory with evicted page thus replacing 8 addresses
       24:  239:                                copy_back_to_virtual++;
        -:  240:                            }
        3:  241:                            victim_page = 0;
        -:  242:                        }
        3:  243:                        if (available_page != tempPage){
        1:  244:                            ptable[tempPage].pageNumber = tempPage;
        1:  245:                            ptable[tempPage].validBit = 0; 
        1:  246:                            ptable[tempPage].dirtyBit = 0;
        -:  247:                        }
        -:  248:                        else{
        2:  249:                            ptable[available_page].pageNumber = available_page;
        2:  250:                            ptable[available_page].validBit = 0; 
        2:  251:                            ptable[available_page].dirtyBit = 0;
        -:  252:                        }
        3:  253:                        victim_page = 0;
        -:  254:
        -:  255:                    }
        -:  256:
        -:  257:
       11:  258:                    int start_replacing_from = available_page * 8; //address to start replacing mainMemory data with virtualMemory data
       99:  259:                    for(int i = corresponding_page * 8; i < (corresponding_page * 8) + 8; i++){
       88:  260:                        if(curr_dirtyBit == 1){
       24:  261:                            mainMemory[start_replacing_from] = temp_array[i];
        -:  262:                        }
        -:  263:                        else{
       64:  264:                            mainMemory[start_replacing_from] = virtualMemory[i]; //replacing the page thus replacing 8 addresses
        -:  265:                        }
       88:  266:                        start_replacing_from++;
        -:  267:                    }
        -:  268:
       11:  269:                    if (ptable[corresponding_page].dirtyBit == 0){
       11:  270:                        ptable[corresponding_page].dirtyBit = 1;
        -:  271:                    }
       11:  272:                    ptable[corresponding_page].validBit = 1;
       11:  273:                    ptable[corresponding_page].pageNumber = available_page;
       11:  274:                    ptable[corresponding_page].fifo = fifo_counter;
       11:  275:                    ptable[corresponding_page].lru = 0;
        -:  276:
       11:  277:                    num_pages_used++;
       11:  278:                    fifo_counter++;
        -:  279:
        -:  280:                    
        -:  281:
        -:  282:                } else{
        -:  283:                    //go to page in mainMemory through ptable[corresponding_page].pageNumber and then add the data there
        5:  284:                    if (ptable[corresponding_page].dirtyBit == 0){
        2:  285:                        ptable[corresponding_page].dirtyBit = 1;
        -:  286:                    }
        5:  287:                    int virtual_to_main = findMainMemoryAddress(ptable[corresponding_page].pageNumber, virtual_address);
        -:  288:
        5:  289:                    mainMemory[virtual_to_main] = data;
        5:  290:                    ptable[corresponding_page].lru += 1; //increment lru when page written on 
        -:  291:
        -:  292:                }
        -:  293:            }
        -:  294:        }
        9:  295:        else if (strcmp(command,"showptable") == 0){
       85:  296:            for(int i = 0; i < NUM_VIRTUAL_PAGES; i++){
       80:  297:                printf("%d:%d:%d:%d\n", i, ptable[i].validBit, ptable[i].dirtyBit, ptable[i].pageNumber);
        -:  298:            }
        -:  299:
        -:  300:        }
        4:  301:        else if (strcmp(command,"showmain") == 0 && arg1 != NULL){
        4:  302:            int main_page = atoi(arg1);
        4:  303:            if (main_page < NUM_MAIN_PAGES){
       36:  304:                for(int i = main_page * 8; i < (main_page * 8) + 8; i++){
       32:  305:                    printf("%d: %d\n", i, mainMemory[i]);
        -:  306:                }
        -:  307:            }
        -:  308:        }
        -:  309:    }
        3:  310:    return 0;
        -:  311:}
