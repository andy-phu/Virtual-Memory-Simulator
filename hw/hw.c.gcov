        -:    0:Source:hw.c
        -:    0:Graph:hwX-hw.gcno
        -:    0:Data:hwX-hw.gcda
        -:    0:Runs:3
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:
        -:    5:#define VIRTUAL_MEMORY_SIZE 128
        -:    6:#define MAIN_MEMORY_SIZE 32
        -:    7:#define PAGE_SIZE 8
        -:    8:#define NUM_VIRTUAL_PAGES (VIRTUAL_MEMORY_SIZE / PAGE_SIZE)
        -:    9:#define NUM_MAIN_PAGES (MAIN_MEMORY_SIZE / PAGE_SIZE)
        -:   10:
        -:   11:// Define a structure to represent a page
        -:   12:typedef struct {
        -:   13:    int validBit;
        -:   14:    int dirtyBit;
        -:   15:    int pageNumber;
        -:   16:    int fifo;
        -:   17:    int lru;
        -:   18:} Page;
        -:   19:
        -:   20:Page ptable[NUM_VIRTUAL_PAGES];
        -:   21:int num_pages_used = -1;
        -:   22:int fifo_counter = 0; // the lower the number the longer it has been in main
        -:   23:int replacement_algorithim; //1 for FIFO and 2 for LRU
        -:   24:int victim_page = 0; // 1 if there is a victim page
        -:   25:
        -:   26:int lru_counter = 0; 
        -:   27:
       12:   28:int findPage(int address){
       12:   29:    return (address/8);
        -:   30:}
        -:   31:
        8:   32:int findAvailableMainMemoryPage(Page ptable[]){
        8:   33:    if (num_pages_used < NUM_MAIN_PAGES - 1){ // if there is available pages in main memory, insert into next
        7:   34:        return num_pages_used + 1;
        -:   35:    }
        -:   36:    else{
        1:   37:        victim_page = 1;
        1:   38:        printf("victim page: %d\n", victim_page);
        1:   39:        if (replacement_algorithim == 1){ // FIFO Replacement
        1:   40:            int curr_longest_in_main_memory = 100000;
        -:   41:            int curr_longest_page;
       17:   42:            for (int i = 0; i < NUM_VIRTUAL_PAGES; i++) {
       16:   43:                if(ptable[i].validBit == 1){
        -:   44:                    // printf("%d:%d\n", ptable[i].fifo, curr_longest_in_main_memory);
        4:   45:                    printf("COMPARISON: page: %d | FIFO: %d\n", i, ptable[i].fifo);
        -:   46:
        4:   47:                    if(ptable[i].fifo <= curr_longest_in_main_memory){
        -:   48:                        // printf("%d", ptable[i].fifo);
        2:   49:                        curr_longest_in_main_memory = ptable[i].fifo;
        2:   50:                        curr_longest_page = i;
        -:   51:                    }
        -:   52:                }
        -:   53:            }
        -:   54:            // printf("curr_longest replace: %d\n", curr_longest.fifo);
        1:   55:            ptable[curr_longest_page].fifo = 100000;
        -:   56:            // printf("curr_longest replace: %d\n", curr_longest.fifo);
        1:   57:            printf("page that is evicted: %d\n", ptable[curr_longest_page].pageNumber);
        1:   58:            printf("curr_longest: %d\n", curr_longest_in_main_memory);
        1:   59:            return ptable[curr_longest_page].pageNumber;
        -:   60:        } 
        -:   61:        else{
        -:   62:            //LRU Replacement
    #####:   63:            int curr_longest_in_main_memory = 100000;
        -:   64:            int curr_longest_page;
    #####:   65:            for (int i = 0; i < NUM_VIRTUAL_PAGES; i++) {
    #####:   66:                if(ptable[i].validBit == 1){ //if it is a page in main memory 
    #####:   67:                    printf("COMPARISON: page: %d | LRU: %d\n", i, ptable[i].lru);
    #####:   68:                    if(ptable[i].lru < curr_longest_in_main_memory){ //find the smallest page lru to evict 
    #####:   69:                        curr_longest_in_main_memory = ptable[i].lru; //set to the smallest
    #####:   70:                        curr_longest_page = i; //gets the smallest lru page 
        -:   71:                    }
        -:   72:                }
        -:   73:            }
        -:   74:            // printf("curr_longest replace: %d\n", curr_longest.fifo);
    #####:   75:            ptable[curr_longest_page].lru = 0; //reset lru to 0
        -:   76:            // printf("curr_longest replace: %d\n", curr_longest.fifo);
    #####:   77:            printf("LRU: page that is evicted: %d\n", curr_longest_page);
    #####:   78:            printf("curr_longest: %d\n", curr_longest_in_main_memory);
    #####:   79:            return ptable[curr_longest_page].pageNumber; //returns the smallest lru page 
        -:   80:        }
        -:   81:    }
        -:   82:}
        -:   83:
        -:   84://to find the main memory address that corresponds to the virtual memory address
        4:   85:int findMainMemoryAddress(int page_number, int virtual_address){
        4:   86:    return ((page_number * 8) + (virtual_address % 8));
        -:   87:}
        -:   88:
        3:   89:int main(int argument, char* argv[]) {
        3:   90:    if (argument == 2) {
        2:   91:        char *algorithm = argv[1];
        2:   92:        if (strcmp(algorithm, "FIFO") == 0) { // Selected page replacement algorithm: FIFO
    #####:   93:            printf("Selected page replacement algorithm: FIFO\n");
    #####:   94:            replacement_algorithim = 1;
        2:   95:        } else if (strcmp(algorithm, "LRU") == 0){ // Selected page replacement algorithm: LRU
    #####:   96:            printf("Selected page replacement algorithm: LRU\n");
    #####:   97:            replacement_algorithim = 2;
        -:   98:        }
        -:   99:    } else{ //Default selected page replacement algorithm: FIFO
        1:  100:        printf("Selected page replacement algorithm: FIFO\n");
        1:  101:        replacement_algorithim = 1;
        -:  102:    }
        -:  103:
        -:  104:    int virtualMemory[VIRTUAL_MEMORY_SIZE]; //initalize virtual memory
      387:  105:    for (int i = 0; i < VIRTUAL_MEMORY_SIZE; i++) {
      384:  106:        virtualMemory[i] = -1;
        -:  107:    }
        -:  108:    int mainMemory[MAIN_MEMORY_SIZE]; //initalize main memory
      387:  109:    for (int j = 0; j < VIRTUAL_MEMORY_SIZE; j++) {
      384:  110:        mainMemory[j] = -1;
        -:  111:    }
        -:  112:
        3:  113:    int address_counter = 0;
       51:  114:    for (int i = 0; i < NUM_VIRTUAL_PAGES; i++) {
       48:  115:        ptable[i].validBit = 0;
       48:  116:        ptable[i].dirtyBit = 0;
       48:  117:        ptable[i].pageNumber = i;
        -:  118:    }
        -:  119:
        -:  120:
        -:  121:    //3.2
        -:  122:    char input[128];
        -:  123:
       20:  124:    while(1){
       23:  125:        printf("> ");
        -:  126:        
       23:  127:        if (fgets(input, 128, stdin) == NULL) {
    #####:  128:            perror("Failed to read input");
        -:  129:        }
        -:  130:
       23:  131:        char *command = strtok(input, " \n");
       23:  132:        char *arg1 = NULL; 
       23:  133:        char *arg2 = NULL; 
        -:  134:
        -:  135:
       23:  136:        if (command != NULL){
       23:  137:            arg1 = strtok(NULL, " \n");        
        -:  138:        }
        -:  139:
       23:  140:        if (arg1!= NULL){
       16:  141:            arg2 = strtok(NULL, " \n");        
        -:  142:        }
        -:  143:
       23:  144:        if(strcmp(command,"quit") == 0){
        3:  145:            break;
        -:  146:        }
       26:  147:        else if (strcmp(command,"read") == 0 && arg1 != NULL){
        6:  148:            int virtual_address = atoi(arg1);
        -:  149:
        6:  150:            int corresponding_page = findPage(virtual_address);
        -:  151:            
        6:  152:            if (ptable[corresponding_page].validBit == 0){
        4:  153:                printf("A Page Fault Has Occurred\n");
        4:  154:                printf("vPage: %d | vAdress: %d | Content: %d\n", corresponding_page, virtual_address, virtualMemory[virtual_address]);
        -:  155:
        4:  156:                int available_page = findAvailableMainMemoryPage(ptable);
        -:  157:
        -:  158:                // printf("vPage: %d | dirty: %d\n", victim_page, ptable[available_page].dirtyBit);
        4:  159:                if (victim_page == 1){  
    #####:  160:                    if (ptable[available_page].dirtyBit == 1){ //if a page is evicted and dirtyBit is 1
        -:  161:                        // printf("virtual_address: %d\n", virtual_address);
    #####:  162:                        int copy_back_to_virtual = available_page * 8;
    #####:  163:                        for(int i = corresponding_page * 8; i < (corresponding_page * 8) + 8; i++){
    #####:  164:                            virtualMemory[i] = mainMemory[copy_back_to_virtual]; //replacing page in virtual memory with evicted page thus replacing 8 addresses
    #####:  165:                            copy_back_to_virtual++;
        -:  166:                        }
    #####:  167:                        victim_page = 0;
        -:  168:                    }
    #####:  169:                    printf("available page: %d\n", available_page);
    #####:  170:                    ptable[available_page].validBit = 0; 
    #####:  171:                    ptable[available_page].dirtyBit = 0;
    #####:  172:                    ptable[available_page].pageNumber = available_page;
    #####:  173:                    victim_page = 0;
        -:  174:
        -:  175:                }
        -:  176:
        -:  177:
        4:  178:                int start_replacing_from = available_page * 8; //address to start replacing mainMemory data with virtualMemory data
        -:  179:
       36:  180:                for(int i = corresponding_page * 8; i < (corresponding_page * 8) + 8; i++){
        -:  181:                    // printf("start: %d , virtual: %d\n", start_replacing_from, virtualMemory[i]);
       32:  182:                    mainMemory[start_replacing_from] = virtualMemory[i]; //replacing the page thus replacing 8 addresses
       32:  183:                    start_replacing_from++;
        -:  184:                }
        4:  185:                ptable[corresponding_page].validBit = 1;
        4:  186:                ptable[corresponding_page].pageNumber = available_page;
        4:  187:                ptable[corresponding_page].fifo = fifo_counter;
        4:  188:                ptable[corresponding_page].lru = 0;
        -:  189:
        4:  190:                num_pages_used++;
        4:  191:                fifo_counter++;
        -:  192:
        -:  193:                
        -:  194:
        -:  195:            } 
        -:  196:            else{
        2:  197:                int virtual_to_main = findMainMemoryAddress(ptable[corresponding_page].pageNumber, virtual_address);
        2:  198:                printf("Content: %d\n", mainMemory[virtual_to_main]);
        2:  199:                ptable[corresponding_page].lru += 1; //increment lru when page read
        2:  200:                printf("READ: corresponding page: %d | LRU: %d\n", corresponding_page, ptable[corresponding_page].lru);
        -:  201:            } 
        -:  202:        }
       20:  203:        else if (strcmp(command,"write") == 0 && arg1 != NULL && arg2 != NULL){
        6:  204:            int virtual_address = atoi(arg1);
        6:  205:            if (virtual_address <= VIRTUAL_MEMORY_SIZE ){
        6:  206:                int data = atoi(arg2);
        -:  207:
        6:  208:                int corresponding_page = findPage(virtual_address);
        -:  209:
        6:  210:                virtualMemory[virtual_address] = data; //writing to virtual memory
        -:  211:
        6:  212:                if (ptable[corresponding_page].validBit == 0){
        4:  213:                    printf("A Page Fault Has Occurred\n");
        4:  214:                    printf("vPage: %d | vAdress: %d | Content: %d\n", corresponding_page, virtual_address, virtualMemory[virtual_address]);
        -:  215:
        4:  216:                    int available_page = findAvailableMainMemoryPage(ptable);
        -:  217:
        -:  218:                    // printf("vPage: %d | dirty: %d\n", victim_page, ptable[available_page].dirtyBit);
        4:  219:                    if (victim_page == 1){  
        1:  220:                        if (ptable[available_page].dirtyBit == 1){ //if a page is evicted and dirtyBit is 1
        -:  221:                            // printf("virtual_address: %d\n", virtual_address);
    #####:  222:                            int copy_back_to_virtual = available_page * 8;
    #####:  223:                            for(int i = corresponding_page * 8; i < (corresponding_page * 8) + 8; i++){
    #####:  224:                                virtualMemory[i] = mainMemory[copy_back_to_virtual]; //replacing page in virtual memory with evicted page thus replacing 8 addresses
    #####:  225:                                copy_back_to_virtual++;
        -:  226:                            }
    #####:  227:                            victim_page = 0;
        -:  228:                        }
        1:  229:                        printf("available page: %d\n", available_page);
        1:  230:                        ptable[available_page].validBit = 0; 
        1:  231:                        ptable[available_page].dirtyBit = 0;
        1:  232:                        ptable[available_page].pageNumber = available_page;
        1:  233:                        victim_page = 0;
        -:  234:
        -:  235:                    }
        -:  236:
        -:  237:
        4:  238:                    int start_replacing_from = available_page * 8; //address to start replacing mainMemory data with virtualMemory data
        -:  239:
       36:  240:                    for(int i = corresponding_page * 8; i < (corresponding_page * 8) + 8; i++){
        -:  241:                        // printf("start: %d , virtual: %d\n", start_replacing_from, virtualMemory[i]);
       32:  242:                        mainMemory[start_replacing_from] = virtualMemory[i]; //replacing the page thus replacing 8 addresses
       32:  243:                        start_replacing_from++;
        -:  244:                    }
        4:  245:                    ptable[corresponding_page].validBit = 1;
        4:  246:                    ptable[corresponding_page].pageNumber = available_page;
        4:  247:                    ptable[corresponding_page].fifo = fifo_counter;
        4:  248:                    ptable[corresponding_page].lru = 0;
        -:  249:
        4:  250:                    num_pages_used++;
        4:  251:                    fifo_counter++;
        -:  252:
        -:  253:                    
        -:  254:
        -:  255:                } else{
        -:  256:                    //go to page in mainMemory through ptable[corresponding_page].pageNumber and then add the data there
        2:  257:                    if (ptable[corresponding_page].dirtyBit == 0){
        2:  258:                        ptable[corresponding_page].dirtyBit = 1;
        -:  259:                    }
        2:  260:                    int virtual_to_main = findMainMemoryAddress(ptable[corresponding_page].pageNumber, virtual_address);
        -:  261:
        2:  262:                    mainMemory[virtual_to_main] = data;
        2:  263:                    ptable[corresponding_page].lru += 1; //increment lru when page written on 
        2:  264:                    printf("WRITE: corresponding page: %d | LRU: %d\n", corresponding_page, ptable[corresponding_page].lru);
        -:  265:
        -:  266:                }
        -:  267:            }
        -:  268:        }
        8:  269:        else if (strcmp(command,"showptable") == 0){
       68:  270:            for(int i = 0; i < NUM_VIRTUAL_PAGES; i++){
       64:  271:                printf("%d:%d:%d:%d\n", i, ptable[i].validBit, ptable[i].dirtyBit, ptable[i].pageNumber);
        -:  272:            }
        -:  273:
        -:  274:        }
        8:  275:        else if (strcmp(command,"showmain") == 0 && arg1 != NULL){
        4:  276:            int main_page = atoi(arg1);
        4:  277:            if (main_page < NUM_MAIN_PAGES){
       36:  278:                for(int i = main_page * 8; i < (main_page * 8) + 8; i++){
       32:  279:                    printf("%d: %d\n", i, mainMemory[i]);
        -:  280:                }
        -:  281:            }
        -:  282:        }
    #####:  283:        else if (strcmp(command,"virtual") == 0){
    #####:  284:            for(int i = 0; i < VIRTUAL_MEMORY_SIZE; i++){
    #####:  285:                printf("%d: %d\n", i, virtualMemory[i]);
        -:  286:            }
        -:  287:        }
        -:  288:
        -:  289:    }
        3:  290:    return 0;
        -:  291:}
